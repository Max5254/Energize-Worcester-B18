function resultsforenergizeworc201811131229 = importStudentSurvey(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   RESULTSFORENERGIZEWORC201811131229 = IMPORTFILE(FILENAME) Reads data
%   from text file FILENAME for the default selection.
%
%   RESULTSFORENERGIZEWORC201811131229 = IMPORTFILE(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   resultsforenergizeworc201811131229 = importfile('results-for-energize-worc-2018-11-13-1229.csv', 2, 26);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/11/13 12:34:25

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
rawStringColumns = string(raw(:, 15));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
resultsforenergizeworc201811131229 = table;
resultsforenergizeworc201811131229.Q1 = cell2mat(rawNumericColumns(:, 1));
resultsforenergizeworc201811131229.Q2 = cell2mat(rawNumericColumns(:, 2));
resultsforenergizeworc201811131229.Q3 = cell2mat(rawNumericColumns(:, 3));
resultsforenergizeworc201811131229.Q4 = cell2mat(rawNumericColumns(:, 4));
resultsforenergizeworc201811131229.Q5 = cell2mat(rawNumericColumns(:, 5));
resultsforenergizeworc201811131229.Q6 = cell2mat(rawNumericColumns(:, 6));
resultsforenergizeworc201811131229.Q7 = cell2mat(rawNumericColumns(:, 7));
resultsforenergizeworc201811131229.Q8 = cell2mat(rawNumericColumns(:, 8));
resultsforenergizeworc201811131229.Q8_a = cell2mat(rawNumericColumns(:, 9));
resultsforenergizeworc201811131229.Q9_1 = cell2mat(rawNumericColumns(:, 10));
resultsforenergizeworc201811131229.Q9_2 = cell2mat(rawNumericColumns(:, 11));
resultsforenergizeworc201811131229.Q9_3 = cell2mat(rawNumericColumns(:, 12));
resultsforenergizeworc201811131229.Q9_4 = cell2mat(rawNumericColumns(:, 13));
resultsforenergizeworc201811131229.Q9_5 = cell2mat(rawNumericColumns(:, 14));
resultsforenergizeworc201811131229.Q9_a = rawStringColumns(:, 1);
resultsforenergizeworc201811131229.Q10 = cell2mat(rawNumericColumns(:, 15));
resultsforenergizeworc201811131229.Q10_a = cell2mat(rawNumericColumns(:, 16));
resultsforenergizeworc201811131229.Q11 = cell2mat(rawNumericColumns(:, 17));
resultsforenergizeworc201811131229.Q12 = cell2mat(rawNumericColumns(:, 18));
resultsforenergizeworc201811131229.Q13 = cell2mat(rawNumericColumns(:, 19));
resultsforenergizeworc201811131229.Q13_a = cell2mat(rawNumericColumns(:, 20));
resultsforenergizeworc201811131229.Q13_b = cell2mat(rawNumericColumns(:, 21));
resultsforenergizeworc201811131229.Q14 = cell2mat(rawNumericColumns(:, 22));
resultsforenergizeworc201811131229.Q14_a = cell2mat(rawNumericColumns(:, 23));
resultsforenergizeworc201811131229.Q15 = cell2mat(rawNumericColumns(:, 24));
resultsforenergizeworc201811131229.Q16 = cell2mat(rawNumericColumns(:, 25));
resultsforenergizeworc201811131229.Q17 = cell2mat(rawNumericColumns(:, 26));
resultsforenergizeworc201811131229.Q18 = cell2mat(rawNumericColumns(:, 27));
resultsforenergizeworc201811131229.Q19 = cell2mat(rawNumericColumns(:, 28));
resultsforenergizeworc201811131229.Q20 = cell2mat(rawNumericColumns(:, 29));
resultsforenergizeworc201811131229.Q21 = cell2mat(rawNumericColumns(:, 30));
resultsforenergizeworc201811131229.Q22 = cell2mat(rawNumericColumns(:, 31));
resultsforenergizeworc201811131229.Q23 = cell2mat(rawNumericColumns(:, 32));
resultsforenergizeworc201811131229.Q24 = cell2mat(rawNumericColumns(:, 33));
resultsforenergizeworc201811131229.Q25 = cell2mat(rawNumericColumns(:, 34));
resultsforenergizeworc201811131229.Q26_1 = cell2mat(rawNumericColumns(:, 35));
resultsforenergizeworc201811131229.Q26_2 = cell2mat(rawNumericColumns(:, 36));
resultsforenergizeworc201811131229.Q26_3 = cell2mat(rawNumericColumns(:, 37));
resultsforenergizeworc201811131229.Q26_4 = cell2mat(rawNumericColumns(:, 38));
resultsforenergizeworc201811131229.Q27 = cell2mat(rawNumericColumns(:, 39));
resultsforenergizeworc201811131229.Q28 = cell2mat(rawNumericColumns(:, 40));
resultsforenergizeworc201811131229.Q29 = cell2mat(rawNumericColumns(:, 41));
resultsforenergizeworc201811131229.Q30_1 = cell2mat(rawNumericColumns(:, 42));
resultsforenergizeworc201811131229.Q30_2 = cell2mat(rawNumericColumns(:, 43));
resultsforenergizeworc201811131229.Q30_3 = cell2mat(rawNumericColumns(:, 44));
resultsforenergizeworc201811131229.Q30_4 = cell2mat(rawNumericColumns(:, 45));
resultsforenergizeworc201811131229.Q30_5 = cell2mat(rawNumericColumns(:, 46));
resultsforenergizeworc201811131229.Q31 = cell2mat(rawNumericColumns(:, 47));

